# With the vader plugin installed, type ":Vader %" to run these tests

# Describe history_traverse#AddToBufferHistoryList()
Execute ('can add to the history list when it is empty'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = []
  :call history_traverse#AddToBufferHistoryList('test_string')
  AssertEqual w:buffer_history_list, ['test_string']

Execute ('can add to the history list when it is not empty'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = ['test_1']
  :call history_traverse#AddToBufferHistoryList('test_string')
  AssertEqual w:buffer_history_list, ['test_1', 'test_string']

Execute ('does not add an empty string to the history list'):
  :let g:skip_bufenter_autocmd = 0
  :let g:history_max_len = 100
  :let g:buffer_history_list = ['test_in']
  :call history_traverse#AddToBufferHistoryList('')
  AssertEqual g:buffer_history_list, ['test_in']

Execute ('increments the current buffer index when the buffer history list gets bigger'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = ['test_1', 'test_2', 'test_3']
  :let w:current_buffer_index = 2
  :call history_traverse#AddToBufferHistoryList('test_4')
  AssertEqual w:buffer_history_list, ['test_1', 'test_2', 'test_3', 'test_4']
  AssertEqual w:current_buffer_index, 3
  :let w:current_buffer_index = 0

Execute ('chops off the end of the list if the current buffer index is not on the end'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = ['test_1', 'test_2', 'test_3', 'test_4']
  :let w:current_buffer_index = 1
  :call history_traverse#AddToBufferHistoryList('test_5')
  AssertEqual w:buffer_history_list, ['test_1', 'test_2', 'test_5']
  AssertEqual w:current_buffer_index, 2

Execute ('does not grow above the max history len value'):
  :let g:history_max_len = 2
  :let w:buffer_history_list = ['test_1', 'test_2']
  :let w:current_buffer_index = 1
  :call history_traverse#AddToBufferHistoryList('test_3')
  AssertEqual w:buffer_history_list, ['test_2', 'test_3']
  AssertEqual w:current_buffer_index, 1

Execute ('does not add to the list if the input file is the same as the current buffer index'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = ['test_1', 'test_2', 'test_3', 'test_4']
  :let w:current_buffer_index = 1
  :call history_traverse#AddToBufferHistoryList('test_2')
  AssertEqual w:buffer_history_list, ['test_1', 'test_2', 'test_3', 'test_4']
  AssertEqual w:current_buffer_index, 1

Execute ('does not add to the list if the input file is the same as the next buffer index'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = ['test_1', 'test_2', 'test_3', 'test_4']
  :let w:current_buffer_index = 1
  :call history_traverse#AddToBufferHistoryList('test_3')
  AssertEqual w:buffer_history_list, ['test_1', 'test_2', 'test_3', 'test_4']
  AssertEqual w:current_buffer_index, 2

# Describe history_traverse#HistoryGoBack()
Execute ('can go back from the end of the list'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = ['test_1', 'test_2', 'test_3', 'test_4']
  :let w:current_buffer_index = 3
  :silent call history_traverse#HistoryGoBack()
  AssertEqual w:buffer_history_list, ['test_1', 'test_2', 'test_3', 'test_4']
  AssertEqual w:current_buffer_index, 2

Execute ('does not go back when the index is 0'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = ['test_1', 'test_2', 'test_3', 'test_4']
  :let w:current_buffer_index = 0
  :silent call history_traverse#HistoryGoBack()
  AssertEqual w:buffer_history_list, ['test_1', 'test_2', 'test_3', 'test_4']
  AssertEqual w:current_buffer_index, 0

Execute ('does not decrement the index when the history list only has one entry'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = ['test_1']
  :let w:current_buffer_index = 0
  :silent call history_traverse#HistoryGoBack()
  AssertEqual w:buffer_history_list, ['test_1']

Execute ('does not go back when a new instance of vim is launched with no buffer loaded'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = []
  :let w:current_buffer_index = 0
  :silent call history_traverse#HistoryGoBack()
  AssertEqual w:buffer_history_list, []
  AssertEqual w:current_buffer_index, 0

Execute ('goes back when in a skipped filetype and the window is in a non-initial state'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = ['test_1', expand('%:p'), 'test_3']
  :let g:history_ft_ignore = ['netrw']
  :let w:current_buffer_index = 1
  :Explore
  :silent call history_traverse#HistoryGoBack()
  AssertEqual w:buffer_history_list, ['test_1', expand('%:p'), 'test_3']
  AssertEqual w:current_buffer_index, 1

Execute ('does not go back when in a skipped filetype and the window is in the initial state'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = []
  :let w:current_buffer_index = 0
  :let g:history_ft_ignore = ['netrw']
  :Explore
  :silent call history_traverse#HistoryGoBack()
  AssertEqual w:buffer_history_list, []
  AssertEqual w:current_buffer_index, 0

# Describe HistoryGoForward()
Execute ('does not go forward when the index is at the head of the list'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = ['test_1', 'test_2', 'test_3', 'test_4']
  :let w:current_buffer_index = 3
  :silent call history_traverse#HistoryGoForward()
  AssertEqual w:buffer_history_list, ['test_1', 'test_2', 'test_3', 'test_4']
  AssertEqual w:current_buffer_index, 3

Execute ('increments the index when it is not at the head of the list'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = ['test_1', 'test_2', 'test_3', 'test_4']
  :let w:current_buffer_index = 2
  :silent call history_traverse#HistoryGoForward()
  AssertEqual w:buffer_history_list, ['test_1', 'test_2', 'test_3', 'test_4']
  AssertEqual w:current_buffer_index, 3

Execute ('resets the state of the index when it is too high'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = ['test_1', 'test_2', 'test_3', 'test_4']
  :let w:current_buffer_index = 100
  :silent call history_traverse#HistoryGoForward()
  AssertEqual w:buffer_history_list, ['test_1', 'test_2', 'test_3', 'test_4']
  AssertEqual w:current_buffer_index, 3

Execute ('does not go forward when a new instance of vim is launched with no buffer loaded'):
  :let g:history_max_len = 100
  :let w:buffer_history_list = []
  :let w:current_buffer_index = 0
  :silent call history_traverse#HistoryGoForward()
  AssertEqual w:buffer_history_list, []
  AssertEqual w:current_buffer_index, 0
