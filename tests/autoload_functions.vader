# With the vader plugin installed, type "vim '+Vader!autoload_functions*' && echo Success || echo Failure" to run these tests

Before (when the history list is empty):
  redir => g:no_next_file_message
  echo 'No next file!'
  redir END
  redir => g:no_prev_file_message
  echo 'No previous file!'
  redir END
  let g:history_max_len = 100
  let w:current_buffer_index = 0
  let w:buffer_history_list = []

Execute (enter a new named file without a history list):
  edit new_file

Then (a new file was added to the history list):
  AssertEqual expand('%:t'), 'new_file'
  AssertEqual w:buffer_history_list, [expand('%:p:h') . '/new_file']

Execute (enter a new unnamed file):
  let g:skip_bufenter_autocmd = 0
  enew

Then (does not add an empty string to the history list):
  " We're now in a buffer with no name
  AssertEqual expand('%:t'), ''
  AssertEqual w:buffer_history_list, []

Execute (attempt to go back when at the start of the history list):
  redir => g:test_messages
  HisTravBack
  redir END

Then (does not go back and emits a message):
  AssertEqual w:buffer_history_list, []
  AssertEqual w:current_buffer_index, 0
  AssertEqual g:test_messages, g:no_prev_file_message

Execute (attempt to go back when a new instance of vim is launched with no buffer loaded):
  redir => g:test_messages
  HisTravBack
  redir END

Then (does not go back and emits a message):
  AssertEqual w:buffer_history_list, []
  AssertEqual w:current_buffer_index, 0
  AssertEqual g:test_messages, g:no_prev_file_message

Execute (attempt to go forward when a new instance of vim is launched with no buffer loaded):
  redir => g:test_messages
  HisTravForward
  redir END

Then (does not go forward and emits a message):
  AssertEqual w:buffer_history_list, []
  AssertEqual w:current_buffer_index, 0
  AssertEqual g:test_messages, g:no_next_file_message

Before (at the end of the history list with one file):
  redir => g:no_next_file_message
  echo 'No next file!'
  redir END
  let g:history_max_len = 100
  let g:test_messages = ''
  let w:buffer_history_list = []
  let w:current_buffer_index = 0
  edit test_1

Execute (attempt to go back when the history list only has one entry):
  redir => g:test_messages
  HisTravBack
  redir END

Then (does not go back and emits a message):
  AssertEqual w:buffer_history_list, [expand('%:p:h') . '/test_1']
  AssertEqual g:test_messages, g:no_prev_file_message

Before (at the end of the history list with multiple files):
  redir => g:no_next_file_message
  echo 'No next file!'
  redir END
  let g:history_max_len = 100
  let g:test_messages = ''
  let w:buffer_history_list = []
  let w:current_buffer_index = 0
  edit test_1
  edit test_2

Execute (enter a new unnamed file with a history list):
  enew

Then (does not add an empty string to the history list):
  " We're now in a new buffer with no name
  AssertEqual expand('%:t'), ''
  " Nothing was added to the list
  AssertEqual w:buffer_history_list, map(['/test_1', '/test_2'], 'expand("%:p:h") . v:val')

Execute (attempt to go forward while at the end of the history list):
  redir => g:test_messages
  HisTravForward
  redir END

Then (does not go forward and emits a message):
  AssertEqual w:buffer_history_list, map(['/test_1', '/test_2'], 'expand("%:p:h") . v:val')
  let g:assert_messages = ''
  AssertEqual w:current_buffer_index, 1
  AssertEqual g:test_messages, g:no_next_file_message

Execute (attempt to go back while at the end of the history list):
  HisTravBack

Then (goes back and does not add to the history list):
  AssertEqual expand('%:p'), expand('%:p:h') . '/test_1'
  AssertEqual w:buffer_history_list, map(['/test_1', '/test_2'], 'expand("%:p:h") . v:val')

Execute (open a new file when the history list is full):
  let g:history_max_len = 2
  edit test_3

Then (removes the first element and adds a new element to the end of the history list):
  AssertEqual w:buffer_history_list, map(['/test_2', '/test_3'], 'expand("%:p:h") . v:val')
  AssertEqual expand('%:p'), w:buffer_history_list[1]

Before (in the middle of the history list with three files):
  redir => g:no_next_file_message
  echo 'No next file!'
  redir END
  let g:history_max_len = 100
  let g:test_messages = ''
  let g:history_fn_ignore = ['file_to_ignore.extension']
  let w:buffer_history_list = []
  let w:current_buffer_index = 0
  edit test_1
  edit test_2
  edit test_3
  HisTravBack
  AssertEqual w:buffer_history_list, map(['/test_1', '/test_2', '/test_3'], 'expand("%:p:h") . v:val')

Execute (go to a new buffer when in the middle of the history list):
  edit test_4

Then (chops off the end of the list and adds a new file):
  AssertEqual w:buffer_history_list, map(['/test_1', '/test_2', '/test_4'], 'expand("%:p:h") . v:val')
  AssertEqual expand('%:p'), w:buffer_history_list[2]

Execute (manually open the current file in the history list):
  let w:current_buffer_index = 1
  edit test_2

Then (does not add to the history list):
  AssertEqual w:buffer_history_list, map(['/test_1', '/test_2', '/test_3'], 'expand("%:p:h") . v:val')
  AssertEqual expand('%:p'), w:buffer_history_list[1]

Execute (manually open the next file in the history list):
  let w:current_buffer_index = 1
  edit test_3

Then (does not add to the history list):
  AssertEqual w:buffer_history_list, map(['/test_1', '/test_2', '/test_3'], 'expand("%:p:h") . v:val')
  AssertEqual expand('%:p'), w:buffer_history_list[2]

Execute (go forward when not at the head of the list):
  HisTravForward

Then (goes forward and does not add to the history list):
  AssertEqual w:buffer_history_list, map(['/test_1', '/test_2', '/test_3'], 'expand("%:p:h") . v:val')
  AssertEqual expand('%:p'), w:buffer_history_list[2]

Execute (go forward when the index is too high):
  let w:current_buffer_index = 100
  HisTravForward

Then (resets the state of the index):
  AssertEqual w:buffer_history_list, map(['/test_1', '/test_2', '/test_3'], 'expand("%:p:h") . v:val')
  AssertEqual expand('%:p'), w:buffer_history_list[1]

Execute (go to a buffer on the file ignore list):
  edit file_to_ignore.extension

Then (goes to the file but doesn\'t add it to the history list):
  AssertEqual w:buffer_history_list, map(['/test_1', '/test_2', '/test_3'], 'expand("%:p:h") . v:val')
  AssertEqual expand('%:p'), expand('%:p:h') . '/file_to_ignore.extension'

Execute (go to a buffer on the file ignore list, then go to a new file):
  edit file_to_ignore.extension
  edit test_4

Then (goes to the new file and cuts the end off of the remaining history list):
  AssertEqual w:buffer_history_list, map(['/test_1', '/test_2', '/test_4'], 'expand("%:p:h") . v:val')
  AssertEqual expand('%:p'), w:buffer_history_list[2]
